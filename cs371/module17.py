# AUTOGENERATED! DO NOT EDIT! File to edit: module17.ipynb (unless otherwise specified).

__all__ = ['TreeNode', 'BinaryTree', 'height', 'balance', 'AVLTreeNode', 'AVLBinaryTree']

# Cell
import numpy as np
import matplotlib.pyplot as plt

from .utils import *

# Cell
class TreeNode:
    def __init__(self, key, val, L=None, R=None):
        self.key, self.val, self.L, self.R = key, val, L, R

    def newnode(self, key, val):
        return TreeNode(key, val)

    def add(self, key, val):
        if key == self.key: self.val = val
        elif key < self.key:
            if self.L:      self.L = self.L.add(key, val)
            else:           self.L = self.newnode(key, val)
        elif key > self.key:
            if self.R:      self.R = self.R.add(key, val)
            else:           self.R = self.newnode(key, val)
        return self

    def _max(self):
        if self.R: return self.R._max()
        else:      return self

    def _swap(self, other):
        self.key, self.val, other.key, other.val = other.key, other.val, self.key, self.val

    def remove(self, key):
        if key == self.key:
            if self.L and self.R:
                self._swap(self.L._max())
                self.L = self.L.remove(key)
            elif self.L: return self.L
            elif self.R: return self.R
            else:        return None
        elif key < self.key:
            if self.L:      self.L = self.L.remove(key)
        elif key > self.key:
            if self.R:      self.R = self.R.remove(key)
        return self

    def draw(self, x, y, delta_x, delta_y):
        plt.text(x, y, f'{self.key} - {self.val}')
        if self.L:
            plt.plot([x, x-delta_x], [y, y-delta_y], '-r')
            self.L.draw(x-delta_x, y-delta_y, delta_x/2, delta_y)
        if self.R:
            plt.plot([x, x+delta_x], [y, y-delta_y], '-r')
            self.R.draw(x+delta_x, y-delta_y, delta_x/2, delta_y)

    def inorder(self):
        if self.L:
            self.L.inorder()
        print(f'{self.key} - {self.val}')
        if self.R:
            self.R.inorder()

    def __repr__(self):
        return f'{self.key} - {self.val}'

# Cell
class BinaryTree:
    def __init__(self, root=None):
        self.root = root

    def add(self, key, val):
        if self.root: self.root = self.root.add(key, val)
        else:         self.root = TreeNode(key, val)

    def remove(self, key):
        if self.root: self.root = self.root.remove(key)

    def draw(self):
        if self.root: self.root.draw(0, 0, 1, 1)

    def inorder(self):
        if self.root: self.root.inorder()

# Cell
def _rotate_left(self):
    R, R_L = self.R, None
    if R: R_L, self.R.L = self.R.L, self
    self.R = R_L
    return R

# Cell
TreeNode._rotate_left = _rotate_left

# Cell
def _rotate_right(self):
    L, L_R = self.L, None
    if L: L_R, self.L.R = self.L.R, self
    self.L = L_R
    return L

# Cell
TreeNode._rotate_right = _rotate_right

# Cell
def _height(self):
    height_L = self.L._height() if self.L else 0
    height_R = self.R._height() if self.R else 0
    return max(height_L, height_R) + 1

# Cell
TreeNode._height = _height

# Cell
def height(node):
    return node._height() if node else 0

# Cell
def _balance(self):
    return height(self.R) - height(self.L)

# Cell
TreeNode._balance = _balance

# Cell
def balance(node):
    return node._balance() if node else 0

# Cell
def _rebalance(self):
    bal = self._balance()
    if   bal == -2:
        if balance(self.L) > 0:
            self.L = self.L._rotate_left()
        self = self._rotate_right()
    elif bal ==  2:
        if balance(self.R) < 0:
            self.R = self.R._rotate_right()
        self = self._rotate_left()
    return self

# Cell
TreeNode._rebalance = _rebalance

# Cell
class AVLTreeNode(TreeNode):
    def __init__(self, key, val):
        super().__init__(key, val)

    def newnode(self, key, val):
        return AVLTreeNode(key, val)

    def add(self, key, val):
        self = super().add(key, val)
        return self._rebalance()

# Cell
class AVLBinaryTree:
    def __init__(self, root=None):
        self.root = root

    def add(self, key, val):
        if self.root: self.root = self.root.add(key, val)
        else:         self.root = AVLTreeNode(key, val)

    def draw(self):
        if self.root: self.root.draw(0, 0, 1, 1)