# AUTOGENERATED! DO NOT EDIT! File to edit: utils.ipynb (unless otherwise specified).

__all__ = ['assert_allclose', 'rgb2gray', 'get_colors', 'get_notebook_file', 'save_notebook', 'build_notebook',
           'convert_notebook']

# Cell
import re
import json
import time
import hashlib
from pathlib import Path

import numpy
import numba
import requests
import seaborn as sns

import ipykernel
import nbdev.export
from IPython.display import Javascript
from notebook.notebookapp import list_running_servers

# Cell
def assert_allclose(A, B, **kwargs):
    if isinstance(A, tuple):
        for a,b in zip(A,B): assert_allclose(a, b, **kwargs) # Possibly add "strict" keyword here
    elif isinstance(A, dict):
        for key in A.keys() | B.keys(): assert_allclose(A[key], B[key], **kwargs)
    else:
        try:    assert(numpy.allclose(A, B, **kwargs))
        except: assert(numpy.all(A == B))

# Cell
def rgb2gray(arr): # From Pillow documentation
    return arr[:,:,0]*(299/1000) + arr[:,:,1]*(587/1000) + arr[:,:,2]*(114/1000)

# Cell
def get_colors(n): return sns.color_palette(None, n)

# Cell
def get_notebook_file():
    id_kernel = re.search('kernel-(.*).json', ipykernel.connect.get_connection_file()).group(1)
    for server in list_running_servers():
        response = requests.get(requests.compat.urljoin(server['url'], 'api/sessions'),
                                params={'token': server.get('token', '')})
        for r in json.loads(response.text):
            if 'kernel' in r and r['kernel']['id'] == id_kernel:
                return Path(r['notebook']['path'])

# Cell
def save_notebook():
    file_notebook = get_notebook_file()
    _get_md5 = lambda : hashlib.md5(file_notebook.read_bytes()).hexdigest()
    md5_start = _get_md5()
    display(Javascript('IPython.notebook.save_checkpoint();')) # Asynchronous
    while md5_start == _get_md5(): time.sleep(1e-1)

# Cell
def build_notebook(save=True):
    if save: save_notebook()
    nbdev.export.notebook2script(fname=get_notebook_file().as_posix())

# Cell
def convert_notebook(save=True, t='markdown'):
    if save: save_notebook()
    os.system(f'jupyter nbconvert --to {t} {get_notebook_file().as_posix()}')